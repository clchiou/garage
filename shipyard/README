Here is the shipyard, where you build executable containerized images of
your applications.

The build process itself is executed in a container as well, which we
usually refer to as a "builder", and naturally its image is referred to
as a "builder image".  To create a base builder image, you run:

  ./scripts/bootstrap TAG


The build process consists of multiple phases:

  * Build phase: In this phase, the build process builds and installs
    all intermediate and final artifacts _locally_ within the container.
    As a result, after the build phase is completed, the builder itself,
    if exported out as an image, is a full application image.  However,
    we generally don't create an application image this way because a
    builder has all the intermediate artifacts that takes much space.

  * Tapeout phase: In this phase, we cherry-pick only build artifacts
    required in the final application image.  The resulting application
    image is much smaller than its builder's.

  * Build image phase: Packaging all build artifacts into a container
    image from the tapeout phase.

  * Build pod phase: Bundle together configuration files, static data,
    and container image(s).  Note that at the moment, a builder can only
    generate **one** image at a time, because it builds everything
    locally, and thus if a pod is composed of multiple images, you will
    have to run multiple builders.


The build phase is sequenced as:

  * //base:build
    All other `build` rules should depend on this rule so that this will
    be the first executed `build` rule.

  * //your/package:build
    This is the `build` rule of your package; at very minimum it should
    depend on `//base:build`.

  * //your/package:tapeout
    This should depend on `//your/package:build` so that it is executed
    after its `build` rule, and reverse depend on `//base:tapeout`.

  * //base:tapeout
    All other `tapeout` rules should reverse depend on this rule so that
    this will be the last executed `tapeout` rule.

  * //your/app:build_pod/POD/IMAGE or //your/app:build_image/IMAGE
    Build containerized application image, which could be just an image
    or image(s) of a pod.  Unfortunately our build system cannot build
    multiple images in one-pass at the moment; if you have multiple
    images, you will have to build each of them in separate passes.

  * //your/app:build_pod/POD
    Bundle together configuration files and application image(s) into a
    pod (a tightly-coupled group of containers).


Development flows:

  * You may reduce developer build time with "cached" builders, which
    are builder images that hold intermediate build artifacts.

      ./scripts/builder build --preserve-container ...
      docker commit -c 'CMD ["/bin/bash"]' BUILD_ID TAG


Currently we have build files for these packages:

		C/C++	PP	PC	CY	REV
cpython		x				3.5.1
garage			x			master
http2					x	master
lxml				x		3.6.0
mako			x			1.0.4
  markupsafe		x
nanomsg		x	x			1.0.0
nghttp2		x				v1.11.1
pyyaml				x		3.11
requests		x			2.10.0
sqlalchemy			x		1.0.13
startup			x			master
v8		x			x	5.4.310
  depot_tools           x

PP = Pure Python (maybe using ctypes)
PC = Python + C module
CY = Cython
