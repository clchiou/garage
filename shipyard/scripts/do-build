#!/usr/bin/env python3

"""Plan and launch builders (this script wraps the builder script)."""

from pathlib import Path
import datetime
import sys

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))
sys.path.append(str(ROOT / 'shipyard'))

from garage import cli
from garage import scripts
from garage.components import ARGS

import shipyard


@cli.command('do-build')
@cli.argument(
    '--dry-run', action='store_true', help='do not really launch builders')
@cli.argument('--version', help='set build version')
@shipyard.argument_foreman
@shipyard.argument_builder
@cli.argument('rule', help='set build rule')
def main(args: ARGS):
    rules = shipyard.RuleIndex(args)
    rules.load_build_data(args.rule)
    with scripts.dry_run(args.dry_run):
        return do_build(args, rules)


def do_build(args, rules):

    builder = shipyard.Builder(args)

    # Figure out what kind of rule we are building
    main_rule = rules.get_rule(args.rule)
    if main_rule.annotations.get('rule-type') != 'build_pod':
        # It's not a pod build rule - no planning required
        builder.build(main_rule.label)
        return 0

    # We are building a pod; let's find all build_image rules

    for dep in main_rule.all_dependencies:
        dep_rule = rules.get_rule(dep.label)
        if dep_rule.annotations.get('rule-type') == 'specify_pod':
            break
    else:
        raise ValueError('no specify_pod rule for %s' % args.rule)
    specify_pod_rule = dep_rule

    build_image_rules = []
    for dep in specify_pod_rule.all_dependencies:
        dep_rule = rules.get_rule(dep.label)
        if dep_rule.annotations.get('rule-type') == 'specify_image':
            rule = rules.get_rule(dep_rule.annotations['build-image-rule'])
            build_image_rules.append(rule)

    # Find the version parameter and determine the version

    version_label = main_rule.annotations['version-parameter']
    version_label = rules.get_parameter(version_label)
    version_label = version_label.label

    if args.version is not None:
        version = args.version
    else:
        version = int(datetime.datetime.now().timestamp())

    # Start the build!

    for rule in build_image_rules:
        image_name = rule.annotations['image-name']
        builder.build(rule.label, extra_args=[
            '--build-name', 'build-%d-image-%s' % (version, image_name),
        ])

    pod_name = main_rule.annotations['pod-name']
    builder.build(main_rule.label, extra_args=[
        '--build-name', 'build-%d-pod-%s' % (version, pod_name),
        '--parameter', '%s=%d' % (version_label, version),
    ])

    return 0


if __name__ == '__main__':
    main()
