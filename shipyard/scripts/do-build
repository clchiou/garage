#!/usr/bin/env python3

"""Plan and launch builders (this script wraps the builder script)."""

import argparse
import datetime
import json
from pathlib import Path
from subprocess import check_call, check_output


def main():

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--dry-run', action='store_true',
                        help="""do not really launch builders""")
    parser.add_argument('rule',
                        help="""set build rule""")
    parser.add_argument('args', nargs=argparse.REMAINDER,
                        help="""args to the builder script""")

    args = parser.parse_args()

    self_path = Path(__file__)
    builder_script = ensure_file(self_path.parent / 'builder')
    foreman_script = ensure_file(self_path.parent / 'foreman.sh')

    def build_rule(rule, *, extra_args=()):
        cmd = [str(builder_script), 'build', rule] + args.args
        cmd.extend(extra_args)
        print('execute: %s' % ' '.join(cmd))
        if not args.dry_run:
            check_call(cmd)

    foreman_args = get_foreman_args(args.args)
    def foreman_list(rule):
        cmd = [str(foreman_script), 'list', rule] + foreman_args
        return json.loads(check_output(cmd).decode('ascii'))

    #
    # Make use of parameter name and build rule name conventions:
    #
    #  image/IMAGE
    #  build-image/IMAGE
    #
    #  pod/POD
    #  version/POD
    #  build-pod/POD
    #

    pod_path, build_pod_name = args.rule.rsplit(':', maxsplit=1)
    if not build_pod_name.startswith('build-pod/'):
        # Non-pod build rule - no planning required.
        build_rule(args.rule)
        return

    # Figure out images that we need to build for this image
    build_data = foreman_list(args.rule)
    pod_name = build_pod_name[len('build-pod/'):]
    pod_data = get_pod_data(build_data, pod_path, pod_name)
    build_image_rules = get_build_image_rules(pod_data, pod_path)

    version = int(datetime.datetime.now().timestamp())

    # Start the build!
    for build_image_rule in build_image_rules:
        image_name = build_image_rule[build_image_rule.rfind('/')+1:]
        build_rule(build_image_rule, extra_args=[
            '--build-name', 'build-%d-image-%s' % (version, image_name),
        ])
    build_rule(args.rule, extra_args=[
        '--build-name', 'build-%d-pod-%s' % (version, pod_name),
        '--parameter', '%s:version/%s=%d' % (pod_path, pod_name, version),
    ])


def ensure_file(path):
    if not path.is_file():
        raise FileNotFoundError(path)
    return path


def get_foreman_args(args):
    """Look for arguments to foreman."""
    foreman_args = []
    args = iter(args)
    while True:
        try:
            arg = next(args)
        except StopIteration:
            break
        if arg.startswith('--foreman='):
            foreman_arg = arg[len('--foreman='):]
        elif arg == '--foreman':
            foreman_arg = next(args)
        else:
            continue
        foreman_args.append(foreman_arg)
    return foreman_args


def get_pod_data(build_data, pod_path, pod_name):
    for parameter_data in build_data[pod_path]['parameters']:
        if parameter_data['label'].endswith(':pod/%s' % pod_name):
            return parameter_data
    raise ValueError('cannot find pod data for %s:%s' % (pod_path, pod_name))


def get_build_image_rules(pod_data, pod_path):
    build_image_rules = []
    for app_data in pod_data['default']['apps']:
        image_label = app_data['image_label']
        if image_label.startswith('//'):
            image_path, image_name = image_label.rsplit(':', maxsplit=1)
        else:
            image_path = pod_path
            image_name = image_label
        build_image_rules.append('%s:build-%s' % (image_path, image_name))
    return build_image_rules


if __name__ == '__main__':
    main()
