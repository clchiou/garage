#!/usr/bin/env python3

"""Plan and launch builders (this script wraps the builder script)."""

from pathlib import Path
import argparse
import datetime
import json
import sys

ROOT = Path(sys.argv[0] or '.').absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))

from garage import cli
from garage import scripts
from garage.components import ARGS


@cli.command('do-build')
@cli.argument(
    '--dry-run', action='store_true', help='do not really launch builders')
@cli.argument(
    '--version', help='set build version')
@cli.argument(
    'rule', help='set build rule')
@cli.argument(
    'args', nargs=argparse.REMAINDER, help='add args to the builder script')
def main(args: ARGS):

    self_path = Path(__file__)
    builder_script = scripts.ensure_file(self_path.parent / 'builder')
    foreman_script = scripts.ensure_file(self_path.parent / 'foreman.sh')

    def build_rule(rule, *, extra_args=()):
        cmd = [str(builder_script), 'build', rule] + args.args
        cmd.extend(extra_args)
        scripts.execute(cmd)

    foreman_args = get_foreman_args(args.args)
    def foreman_list(rule):
        cmd = [str(foreman_script), 'list', rule] + foreman_args
        output = scripts.execute(cmd, capture_stdout=True)[1]
        return json.loads(output.decode('ascii'))

    #
    # Make use of parameter name and build rule name conventions:
    #
    #  image/IMAGE
    #  build-image/IMAGE
    #
    #  pod/POD
    #  version/POD
    #  build-pod/POD
    #
    with scripts.dry_run(args.dry_run):

        pod_path, build_pod_name = args.rule.rsplit(':', maxsplit=1)
        if not build_pod_name.startswith('build-pod/'):
            # Non-pod build rule - no planning required.
            build_rule(args.rule)
            return 0

        # Figure out images that we need to build for this image
        build_data = foreman_list(args.rule)
        pod_name = build_pod_name[len('build-pod/'):]
        pod_data = get_pod_data(build_data, pod_path, pod_name)
        build_image_rules = get_build_image_rules(pod_data, pod_path)

        if args.version is not None:
            version = int(args.version)
        else:
            version = int(datetime.datetime.now().timestamp())

        # Start the build!
        for build_image_rule in build_image_rules:
            image_name = build_image_rule[build_image_rule.rfind('/')+1:]
            build_rule(build_image_rule, extra_args=[
                '--build-name', 'build-%d-image-%s' % (version, image_name),
            ])
        build_rule(args.rule, extra_args=[
            '--build-name', 'build-%d-pod-%s' % (version, pod_name),
            '--parameter', '%s:version/%s=%d' % (pod_path, pod_name, version),
        ])

        return 0


def get_foreman_args(args):
    """Look for arguments to foreman."""
    foreman_args = []
    args = iter(args)
    while True:
        try:
            arg = next(args)
        except StopIteration:
            break
        if arg.startswith('--foreman='):
            foreman_args.append(arg[len('--foreman='):])
        elif arg == '--foreman':
            foreman_args.append(next(args))
        elif arg.startswith('--path=') or arg.startswith('--parameter='):
            foreman_args.append(arg)
        elif arg == '--path' or arg == '--parameter':
            foreman_args.append(arg)
            foreman_args.append(next(args))
    return foreman_args


def get_pod_data(build_data, pod_path, pod_name):
    for parameter_data in build_data[pod_path]['parameters']:
        if parameter_data['label'].endswith(':pod/%s' % pod_name):
            return parameter_data
    raise ValueError('cannot find pod data for %s:%s' % (pod_path, pod_name))


def get_build_image_rules(pod_data, pod_path):
    build_image_rules = []
    for app_data in pod_data['default']['apps']:
        image_label = app_data['image_label']
        if image_label.startswith('//'):
            image_path, image_name = image_label.rsplit(':', maxsplit=1)
        else:
            image_path = pod_path
            image_name = image_label
        build_image_rules.append('%s:build-%s' % (image_path, image_name))
    return build_image_rules


if __name__ == '__main__':
    main()
