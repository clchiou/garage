#!/usr/bin/env python3

import datetime
from argparse import ArgumentParser
from pathlib import Path
from subprocess import check_call
from tempfile import TemporaryDirectory


def main():

    parser = ArgumentParser(description="""Prepare and call builder.""")

    def add_common_args(parser):
        parser.add_argument('--builder', required=True,
                            help="""set builder image""")
        parser.add_argument('--volume', action='append',
                            help="""add data volume""")

    def add_build_args(parser):
        add_common_args(parser)
        # While you could do "--foreman=--path=/some/path", for your
        # convenience, we have denormalized "--path", "--parameter", and
        # "rule" argument of foreman.
        parser.add_argument('--path', action='append',
                            help="""add foreman search path""")
        parser.add_argument('--parameter', action='append',
                            help="""add parameter to foreman""")
        parser.add_argument('--foreman', action='append',
                            help="""send argument to foreman""")
        parser.add_argument('--out', required=True,
                            help="""set output directory path""")
        parser.add_argument('rule', nargs='+',
                            help="""add build rule""")

    subparsers = parser.add_subparsers(help="""Sub-commands.""")
    # http://bugs.python.org/issue9253
    subparsers.dest = 'container_type'
    subparsers.required = True

    parser_run = subparsers.add_parser(
        'run', help="""Run builder.""")
    add_common_args(parser_run)
    parser_run.set_defaults(build=False)

    parser_build = subparsers.add_parser(
        'build', help="""Build packages and maybe tapeout images.""")
    add_build_args(parser_build)
    parser_build.set_defaults(build=True)

    args = parser.parse_args()

    build_id = int(datetime.datetime.now().timestamp())
    build_name = 'build-%d' % build_id

    root = Path(__file__).resolve().parent.parent.parent
    if not (root / '.git').is_dir():
        raise AssertionError('not garage root: %s' % root)

    if args.build and args.out:
        out = Path(args.out).resolve()
    else:
        out = None

    cmd = ['docker', 'run']
    cmd.extend(['--name', build_name])
    if not args.build:
        cmd.extend(['--interactive', '--tty'])

    cmd.extend(['--volume', '%s:/home/plumber/garage:ro' % root])
    for volume in args.volume or ():
        cmd.extend(['--volume', volume])
    if out:
        cmd.extend(['--volume', '%s:/home/plumber/out:rw' % out])

    cmd.append(args.builder)

    if args.build:
        foreman = '/home/plumber/garage/shipyard/scripts/foreman.sh'
        cmd.extend([foreman, 'build'])
        for path in args.path or ():
            cmd.extend(['--path', path])
        for parameter in args.parameter or ():
            cmd.extend(['--parameter', parameter])
        cmd.extend(args.foreman or ())
        cmd.extend(args.rule)
    else:
        cmd.append('/bin/bash')

    call(cmd)

    # Don't remove builder on crash so that you may examine it.
    call(['docker', 'rm', build_name])


def call(cmd):
    print('execute: %s' % ' '.join(cmd))
    check_call(cmd)


if __name__ == '__main__':
    main()
