#!/usr/bin/env python3

"""Launch build process in a container."""

from pathlib import Path
import datetime
import sys

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))

from garage import cli
from garage import scripts
from garage.components import ARGS


argument_common = cli.combine_decorators(
    cli.argument(
        '--build-name', help='set build container name'),
    cli.argument(
        '--builder', required=True, help='set builder image'),
    cli.argument(
        '--env-var', metavar='NAME=VALUE', action='append',
        help='add environment variable',
    ),
    cli.argument(
        '--volume', action='append',
        help='add data volume',
    ),
    cli.argument(
        '--preserve-container', action='store_true',
        help='do not remove container on exit',
    ),
)


def add_environment_variables(cmd, args):
    if args.env_var:
        for pair in args.env_var:
            cmd.append('--env')
            cmd.append(pair)
    return cmd


@cli.command(help='run builder interactively')
@argument_common
def run(args: ARGS, builder, cmd):
    """Run an interactive session in a builder container."""
    add_environment_variables(cmd, args)
    cmd.extend(['--interactive', '--tty', builder, '/bin/bash'])
    scripts.execute(cmd)
    return 0


# While you could do `--foreman=--path=/some/path`, for convenience, we
# denormalize --path, --parameter, and rule argument of foreman.
@cli.command(help='execute build rules')
@argument_common
@cli.argument(
    '--path', action='append', help='add foreman search path')
@cli.argument(
    '--parameter', action='append', help='add parameter to foreman')
@cli.argument(
    '--foreman', action='append', help='send argument to foreman')
@cli.argument(
    '--output', help='set output directory path')
@cli.argument(
    'rule', nargs='+', help='add build rule')
def build(args: ARGS, builder, cmd):
    """Execute one or more build rules."""
    add_environment_variables(cmd, args)
    if args.output:
        output = Path(args.output).resolve()
        cmd.extend(['--volume', '%s:/home/plumber/output:rw' % output])
    cmd.extend([
        builder,
        '/home/plumber/garage/shipyard/scripts/foreman.sh', 'build',
    ])
    for path in args.path or ():
        cmd.extend(['--path', path])
    for parameter in args.parameter or ():
        cmd.extend(['--parameter', parameter])
    cmd.extend(args.foreman or ())
    cmd.extend(args.rule)
    scripts.execute(cmd)
    return 0


@cli.command('builder')
@cli.argument(
    '--dry-run', action='store_true', help='do not really launch containers')
@cli.sub_command_info('action', 'builder action')
@cli.sub_command(run)
@cli.sub_command(build)
def main(args: ARGS):
    with scripts.dry_run(args.dry_run):
        # Construct build name
        build_name = args.build_name
        if not build_name:
            build_name = 'build-%d' % int(datetime.datetime.now().timestamp())
        # Construct common part of the `docker run` command
        scripts.ensure_directory(ROOT / '.git')
        cmd = [
            'docker', 'run',
            '--name', build_name,
            '--volume', '%s:/home/plumber/garage:ro' % ROOT,
        ]
        for volume in args.volume or ():
            cmd.extend(['--volume', volume])
        # Execute the action
        rc = args.action(builder=args.builder, cmd=cmd)
        if not args.preserve_container:
            # Don't remove builder on crash so that you may examine it
            scripts.execute(['docker', 'rm', build_name])
        return rc


if __name__ == '__main__':
    main()
