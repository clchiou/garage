#!/usr/bin/env python3

"""Render a Mako template."""

import argparse
import json
import sys

from mako.lookup import TemplateLookup


def main(argv):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '--output',
        help="""set output path (default to stdout)""",
    )
    parser.add_argument(
        '--template-dir', metavar='PATH', required=True, action='append',
        help="""add Mako templates lookup path""",
    )
    parser.add_argument(
        '--template-var', metavar=('NAME', 'VALUE'), nargs=2, action='append',
        help="""add a variable (value is JSON-encoded)""",
    )
    parser.add_argument(
        'template',
        help="""set Mako template to render (relative to template dir)""",
    )
    args = parser.parse_args(argv[1:])

    template_vars = {}
    for name, value in args.template_var or ():
        template_vars[name] = json.loads(value)

    templates = TemplateLookup(
        directories=args.template_dir,
        strict_undefined=True,
        input_encoding='utf-8',
        output_encoding='utf-8',
        encoding_errors='replace',
    )

    content = templates.get_template(args.template).render(**template_vars)

    if args.output:
        with open(args.output, 'wb') as output_file:
            output_file.write(content)
    else:
        sys.stdout.buffer.write(content)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
