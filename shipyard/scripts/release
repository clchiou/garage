#!/usr/bin/env python3

from collections import OrderedDict
from collections import defaultdict
from pathlib import Path
import logging
import os
import os.path
import sys

import yaml

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'foreman'))
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))
sys.path.append(str(ROOT / 'shipyard'))

from foreman import Label

from garage import apps
from garage import scripts
from garage.formatters.yaml import represent_mapping

import shipyard
import shipyard.release


LOG = logging.getLogger(__name__)


# We search ${OPS_ROOT}/releases for releases by default
OPS_ROOT = scripts.ensure_path(os.environ.get('OPS_ROOT'))


with_argument_podv_list = apps.with_argument(
    'podv', nargs='+',
    help='add versioned pod label (format: "//label@version")',
)


with_argument_podv = apps.with_argument(
    'podv',
    help='set versioned pod label (format: "//label@version")',
)


def parse_podv_list(podv_list):
    labels_versions = OrderedDict()  # As ordered set
    for label_version in podv_list:
        labels_versions[parse_podv(label_version)] = None
    return list(labels_versions)


def parse_podv(podv):
    label, version = podv.rsplit('@', maxsplit=1)
    label = Label.parse(label)
    return label, version


@apps.with_prog('list')
@apps.with_help('list all build artifacts')
def list_artifacts(args):
    """List all build artifacts."""
    artifacts = _list_artifacts(args)
    # Preserve order for readability (PyYAML sucks in this regard).
    yaml.SafeDumper.add_representer(OrderedDict, represent_mapping)
    artifacts = yaml.safe_dump(
        artifacts,
        default_flow_style=False,
        explicit_start=True,
        indent=2,
    )
    print(artifacts, end='')
    return 0


def _list_artifacts(args):
    artifacts = OrderedDict()

    def pod_dir_to_inst_file(pod_dir):
        return pod_dir.with_name(pod_dir.name + '.yaml')

    def inst_file_to_pod_dir(inst_file):
        return inst_file.with_suffix('')

    def path_to_lv(path):
        version, path = path.name, path.parent
        name, path = path.name, path.parent
        return ('//%s:%s' % (path, name), version)

    def put_entry(table, label, version, value):
        subtable = table.get(label)
        if subtable is None:
            subtable = table[label] = OrderedDict()
        subtable[version] = value

    root = scripts.ensure_path(args.release_root).resolve()

    # NOTE: Do NOT use presence of pod.json to find pod directories
    # because some pods do not have pod.json.

    channels_dir = root / 'channels'
    artifacts['channels'] = channels = [c.name for c in channels_dir.iterdir()]
    channels.sort()
    pod_to_channels = defaultdict(list)
    for channel in channels:
        # NOTE: rglob does NOT traverse into symlinks.
        for pod_dir in (channels_dir / channel).rglob('*'):
            if not pod_dir.is_symlink():
                continue
            pod_dir = pod_dir.resolve()
            if pod_dir_to_inst_file(pod_dir).exists():
                pod_to_channels[pod_dir].append(channel)

    artifacts['pods'] = pods = OrderedDict()
    image_to_pods = defaultdict(list)
    volume_to_pods = defaultdict(list)
    pods_dir = root / 'pods'
    images_dir = root / 'images'
    volumes_dir = root / 'volumes'
    for inst_file in sorted(pods_dir.rglob('*.yaml')):
        pod_dir = inst_file_to_pod_dir(inst_file)
        if not pod_dir.exists():
            continue
        label, version = path_to_lv(pod_dir.relative_to(pods_dir))
        put_entry(pods, label, version, pod_to_channels.get(pod_dir, ()))
        podv = '%s@%s' % (label, version)
        # NOTE: We cannot use `foreman list` to load instruction file
        # unless we also check out the source tree to the specific
        # revision.  As a workaround, let's find symlinks and detect its
        # kind instead.
        for path in pod_dir.iterdir():
            if not path.is_symlink():
                continue
            path = path.resolve()
            # Sadly pathlib doesn't support prefix matching.
            if Path(os.path.commonpath([path, images_dir])) == images_dir:
                image_to_pods[path].append(podv)
            elif Path(os.path.commonpath([path, volumes_dir])) == volumes_dir:
                volume_to_pods[path].append(podv)

    artifacts['images'] = images = OrderedDict()
    for image_dir in sorted(images_dir.rglob('image.aci')):
        image_dir = image_dir.parent
        label, version = path_to_lv(image_dir.relative_to(images_dir))
        put_entry(images, label, version, image_to_pods.get(image_dir, ()))

    artifacts['volumes'] = volumes = OrderedDict()
    # There should be exactly one tarball per volume directory.
    for volume_dir in sorted(volumes_dir.rglob('*.tar.gz')):
        volume_dir = volume_dir.parent
        label, version = path_to_lv(volume_dir.relative_to(volumes_dir))
        put_entry(volumes, label, version, volume_to_pods.get(volume_dir, ()))

    return artifacts


@apps.with_prog('read-prop')
@apps.with_help('read build rule property')
@shipyard.with_foreman_argument
@apps.with_argument(
    'property', choices=('rule-type', 'label'),
    help='choose property',
)
@apps.with_argument(
    'rule', help='set pod build rule',
)
def read_property(args):
    """Read build rule property."""
    rules = shipyard.RuleIndex(args)
    rules.load_from_labels([args.rule])
    rule_obj = rules.get_rule(args.rule)
    rule_type = rule_obj.annotations.get('rule-type')
    if args.property == 'rule-type':
        if rule_type is not None:
            print(rule_type)
        else:
            LOG.warning('rule %s has no rule-type annotation', args.rule)
    elif args.property == 'label':
        # FIXME: This is probably confusing: For build rules that are
        # not annotated with rule-type, we treat it as a build_pod rule
        # for convenience.
        if rule_type == 'build_pod' or rule_type is None:
            print(rules.get_pod_name(rule_obj))
        elif rule_type == 'build_volume':
            print(rules.get_volume_name(rule_obj))
        else:
            LOG.warning('label is undefined for rule %s', args.rule)
    else:
        raise AssertionError
    return 0


@apps.with_prog('gen-inst')
@apps.with_help('generate instruction file')
@shipyard.with_foreman_argument
@apps.with_argument(
    '--repo', metavar=('SCM', 'PATH'), nargs=2, action='append',
    help='add source repo to revision stamp (SCM: git, hg)',
)
@shipyard.with_argument_input
@apps.with_argument(
    '--default', metavar='PATH',
    help='provide default values to the instruction',
)
@apps.with_argument(
    'rule', help='set pod build rule',
)
@apps.with_argument(
    'version', help='set pod version',
)
def generate_instruction(args):
    """Generate instruction file."""

    # Preserve order for readability (PyYAML sucks in this regard).
    yaml.SafeDumper.add_representer(OrderedDict, represent_mapping)

    instruction_data = OrderedDict([
        ('rule', args.rule),
        ('revisions', []),
    ])

    rules = shipyard.RuleIndex(args)
    rules.load_from_labels([args.rule])
    rule_obj = rules.get_rule(args.rule)
    # FIXME: This is probably confusing: For build rules that are not
    # annotated with rule-type, we treat it as a build_pod rule for
    # convenience.
    rule_type = rule_obj.annotations.get('rule-type', 'build_pod')
    if rule_type == 'build_pod':
        label = rules.get_pod_name(rule_obj)
        kind = 'pods'
    elif rule_type == 'build_volume':
        label = rules.get_volume_name(rule_obj)
        kind = 'volumes'
    else:
        raise ValueError(
            'expect build_pod or build_volume type of rule: %s' % args.rule)

    default_path = None
    if args.default:
        default_path = Path(args.default)
    elif args.input_root:
        # If no default from command-line, look up one from input.
        default_path = shipyard.find_default_path(args.input_root, kind, label)
        if default_path is not None:
            LOG.info('use default: %s', default_path)
    if default_path is not None:
        default = yaml.load(default_path.read_text())
        # Restrict default to these fields.
        for block_name in ('images', 'volumes', 'parameters'):
            block = default.get(block_name)
            if block:
                instruction_data[block_name] = OrderedDict(
                    (name, block[name])
                    for name in sorted(block)
                )

    revisions = instruction_data['revisions']
    source_repos = [('git', ROOT)]
    source_repos.extend(args.repo or ())
    for scm, repo_path in source_repos:
        repo_path = scripts.ensure_directory(repo_path)
        if scm == 'git':
            url, revision, dirty = shipyard.release.get_git_stamp(repo_path)
        elif scm == 'hg':
            url, revision, dirty = shipyard.release.get_hg_stamp(repo_path)
        else:
            raise RuntimeError('unsupported scm: %s' % scm)
        LOG.info('stamp: %s %s %s%s', scm, url, '*' if dirty else '', revision)
        revisions.append(OrderedDict([
            ('scm', scm),
            ('url', url),
            ('revision', revision),
            ('dirty', dirty),
        ]))

    instruction_data = yaml.safe_dump(
        instruction_data,
        default_flow_style=False,
        explicit_start=True,
        indent=2,
    )

    path = shipyard.release.ReleaseRepo.get_instruction_path(
        args.release_root, kind, label, args.version)
    if path.exists():
        LOG.warning('overwrite %s', path)
    with scripts.dry_run(args.dry_run):
        scripts.mkdir(path.parent)
        scripts.ensure_contents(path, instruction_data)

    return 0


@apps.with_prog('cat-inst')
@apps.with_help('print out instruction file')
@with_argument_podv
def cat_instruction(args):
    """Print out instruction file."""
    label, version = parse_podv(args.podv)
    _, path = shipyard.release.ReleaseRepo.detect_instruction_path(
        args.release_root, label, version)
    print(path.read_text(), end='')
    return 0


@apps.with_help('build pods')
@shipyard.with_foreman_argument
@shipyard.with_builder_argument
@shipyard.with_argument_input
@with_argument_podv_list
def build(args):
    """Build pods from versioned labels."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    labels_versions = parse_podv_list(args.podv)
    instructions = repo.load_instructions(labels_versions)

    with scripts.dry_run(args.dry_run):
        okay = shipyard.release.execute_instructions(
            instructions, repo, builder, args.input_root or ())
    return 0 if okay else 1


@apps.with_prog('build-inst')
@apps.with_help('build pods from instruction files')
@shipyard.with_foreman_argument
@shipyard.with_builder_argument
@shipyard.with_argument_input
@apps.with_argument(
    'instruction', type=Path, nargs='+',
    help='provide path to release instruction file',
)
def build_instructions(args):
    """Execute release instruction files and build pods."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    instructions = repo.load_instruction_files(args.instruction)

    with scripts.dry_run(args.dry_run):
        okay = shipyard.release.execute_instructions(
            instructions, repo, builder, args.input_root or ())
    return 0 if okay else 1


@apps.with_help('bind release channel to pod versions')
@apps.with_argument('channel', help='set release channel to bind')
@with_argument_podv_list
def bind(args):
    """Bind release channel to a specific pod versions."""

    channel_root = args.release_root / 'channels' / args.channel
    pods_root = args.release_root / 'pods'

    labels_versions = parse_podv_list(args.podv)

    pod_paths = []
    okay = True
    for label, version in labels_versions:
        pod_path = pods_root / label.path / label.name / version
        pod_paths.append(pod_path)
        if not pod_path.exists():
            LOG.error('pod does not exist: %s@%s', label, version)
            okay = False
    if not okay:
        return 1

    with scripts.dry_run(args.dry_run):
        for (label, next_version), pod_path in zip(labels_versions, pod_paths):
            channel_pod_path = channel_root / label.path / label.name
            if channel_pod_path.exists():
                this_version = channel_pod_path.resolve().name
                if this_version == next_version:
                    LOG.info(
                        'skip binding %s@%s again to channel %s',
                        label, next_version, args.channel)
                    continue
                LOG.info(
                    'rebind %s@%s to channel %s from version %s',
                    label, next_version, args.channel, this_version)
                scripts.rm(channel_pod_path)
            else:
                LOG.info(
                    'bind %s@%s to channel %s',
                    label, next_version, args.channel)
            scripts.mkdir(channel_pod_path.parent)
            scripts.symlink_relative(pod_path, channel_pod_path)

    return 0


@apps.with_help('clean up old build artifacts')
@apps.with_argument(
    '--keep', type=int, required=True,
    help='keep these latest versions',
)
def cleanup(args):
    """Clean up old build artifacts."""

    def pod_dir_to_inst_file(pod_dir):
        return pod_dir.with_name(pod_dir.name + '.yaml')

    root = scripts.ensure_path(args.release_root).resolve()
    pods_dir = root / 'pods'
    images_dir = root / 'images'
    volumes_dir = root / 'volumes'

    def lv_to_path(dirpath, label_str, version):
        label = Label.parse(label_str)
        return dirpath / label.path / label.name / version

    artifacts = _list_artifacts(args)

    with scripts.dry_run(args.dry_run):

        # Remove dangling instruction files.
        for inst_file in sorted((root / 'pods').rglob('*.yaml')):
            pod_dir = inst_file.with_suffix('')
            if not pod_dir.exists():
                LOG.info('remove instruction file: %s', inst_file)
                scripts.rm(inst_file)

        pods = artifacts['pods']
        pods_left = set()
        for label, versions_channels in pods.items():
            num_left = len(versions_channels)
            while versions_channels:
                if num_left <= args.keep:
                    break
                version, channels = versions_channels.popitem(last=False)
                podv = '%s@%s' % (label, version)
                if channels:
                    pods_left.add(podv)
                else:
                    pod_dir = lv_to_path(pods_dir, label, version)
                    inst_file = pod_dir_to_inst_file(pod_dir)
                    LOG.info('remove pod: %s', podv)
                    scripts.rm(pod_dir, recursive=True)
                    LOG.info('remove instruction file: %s', inst_file)
                    scripts.rm(inst_file)
                    num_left -= 1
            for version in versions_channels:
                pods_left.add('%s@%s' % (label, version))

        for label, versions_pods in artifacts['images'].items():
            for version, pods in versions_pods.items():
                # This version is needed by these pods; if their
                # intersection with pods_left is empty, then we may
                # remove this image (same for volumes below).
                if not set(pods).intersection(pods_left):
                    LOG.info('remove image: %s@%s', label, version)
                    scripts.rm(
                        lv_to_path(images_dir, label, version),
                        recursive=True,
                    )

        for label, versions_pods in artifacts['volumes'].items():
            for version, pods in versions_pods.items():
                if not set(pods).intersection(pods_left):
                    LOG.info('remove volume: %s@%s', label, version)
                    scripts.rm(
                        lv_to_path(volumes_dir, label, version),
                        recursive=True,
                    )

    return 0


@apps.with_argument(
    '--dry-run', action='store_true',
    help='do not execute build',
)
@apps.with_argument(
    '--release-root', type=Path,
    required=not OPS_ROOT,
    default=OPS_ROOT / 'releases' if OPS_ROOT else None,
    help='''provide path to the release directory (default derived from
            OPS_ROOT environment variable, which is %(default)s)
         ''',
)
@apps.with_apps(
    'action', 'release management action',
    list_artifacts,
    read_property,
    generate_instruction,
    cat_instruction,
    build,
    build_instructions,
    bind,
    cleanup,
)
def main(args):
    """Release management tool."""
    return args.action(args)


if __name__ == '__main__':
    apps.run(main)
