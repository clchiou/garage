#!/usr/bin/env python3

from pathlib import Path
import logging
import os
import sys

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'foreman'))
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))
sys.path.append(str(ROOT / 'shipyard'))

from garage import cli
from garage import scripts
from garage.components import ARGS

import shipyard
import shipyard.release


LOG = logging.getLogger(__name__)


# We search ${OPS_ROOT}/releases for releases by default
OPS_ROOT = scripts.ensure_path(os.environ.get('OPS_ROOT'))


@cli.command(help='build pods')
@shipyard.argument_foreman
@shipyard.argument_builder
@cli.argument(
    'instruction', type=Path, nargs='+',
    help='provide path to release instruction file',
)
def build(args: ARGS):
    """Execute release instructions and build pods."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)

    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    # Load release instructions
    instructions = []
    build_ids = set()
    for path in args.instruction:
        LOG.info('load release instruction: %s', path)
        instruction = repo.load_instruction(path)
        # You should not build the same pod twice, by which I mean they
        # have have the same build rule and version
        build_id = (instruction.rule, instruction.version)
        if build_id in build_ids:
            raise ValueError('duplicated instruction: %s' % instruction)
        build_ids.add(build_id)
        instructions.append(instruction)

    # Execute release instructions
    okay = True
    with scripts.dry_run(args.dry_run):
        for instruction in instructions:
            LOG.info('execute release instruction: %s', instruction)
            if not instruction.execute(repo, builder):
                okay = False
                break

    return 0 if okay else 1


@cli.command('release')
@cli.argument('--dry-run', action='store_true', help='do not really build')
@cli.argument(
    '--release-root', type=Path,
    required=not OPS_ROOT,
    default=OPS_ROOT / 'releases' if OPS_ROOT else None,
    help='''provide path to the release directory (default derived from
            OPS_ROOT environment variable, which is %(default)s)
         ''',
)
@cli.sub_command_info('action', 'release management action')
@cli.sub_command(build)
def main(args: ARGS):
    """Release management tool."""
    return args.action()


if __name__ == '__main__':
    main()
