#!/usr/bin/env python3

from collections import OrderedDict
from pathlib import Path
import logging
import os
import sys

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'foreman'))
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))
sys.path.append(str(ROOT / 'shipyard'))

from foreman import Label

from garage import cli
from garage import scripts
from garage.components import ARGS

import shipyard
import shipyard.release


LOG = logging.getLogger(__name__)


# We search ${OPS_ROOT}/releases for releases by default
OPS_ROOT = scripts.ensure_path(os.environ.get('OPS_ROOT'))


argument_podv = cli.argument(
    'podv', nargs='+',
    help='add versioned pod label to build (format: "//label@version")',
)


def parse_podv_list(podv_list):
    labels_versions = OrderedDict()  # As ordered set
    for label_version in podv_list:
        label, version = label_version.rsplit('@', maxsplit=1)
        label = Label.parse(label)
        labels_versions[(label, version)] = None
    return list(labels_versions)


@cli.command('build', help='build pods')
@shipyard.argument_foreman
@shipyard.argument_builder
@argument_podv
def build(args: ARGS):
    """Build pods from versioned labels."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    labels_versions = parse_podv_list(args.podv)
    instructions = repo.load_instructions(labels_versions)

    with scripts.dry_run(args.dry_run):
        okay = shipyard.release.execute_instructions(
            instructions, repo, builder)
    return 0 if okay else 1


@cli.command('build-inst', help='build pods from instruction files')
@shipyard.argument_foreman
@shipyard.argument_builder
@cli.argument(
    'instruction', type=Path, nargs='+',
    help='provide path to release instruction file',
)
def build_instructions(args: ARGS):
    """Execute release instruction files and build pods."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    instructions = repo.load_instruction_files(args.instruction)

    with scripts.dry_run(args.dry_run):
        okay = shipyard.release.execute_instructions(
            instructions, repo, builder)
    return 0 if okay else 1


@cli.command('bind', help='bind release channel to pod versions')
@cli.argument('channel', help='set release channel to bind')
@argument_podv
def bind(args: ARGS):
    """Bind release channel to a specific pod versions."""

    channel_root = args.release_root / 'channels' / args.channel
    pods_root = args.release_root / 'pods'

    labels_versions = parse_podv_list(args.podv)

    pod_paths = []
    okay = True
    for label, version in labels_versions:
        pod_path = pods_root / label.path / label.name / version
        pod_paths.append(pod_path)
        if not pod_path.exists():
            LOG.error('pod does not exist: %s@%s', label, version)
            okay = False
    if not okay:
        return 1

    with scripts.dry_run(args.dry_run):
        for (label, next_version), pod_path in zip(labels_versions, pod_paths):
            channel_pod_path = channel_root / label.path / label.name
            if channel_pod_path.exists():
                this_version = channel_pod_path.resolve().name
                if this_version == next_version:
                    LOG.info(
                        'skip binding %s@%s again to channel %s',
                        label, next_version, args.channel)
                    continue
                LOG.info(
                    'rebind %s@%s to channel %s from version %s',
                    label, next_version, args.channel, this_version)
                scripts.rm(channel_pod_path)
            else:
                LOG.info(
                    'bind %s@%s to channel %s',
                    label, next_version, args.channel)
            scripts.mkdir(channel_pod_path.parent)
            scripts.symlink_relative(pod_path, channel_pod_path)

    return 0


@cli.command('release')
@cli.argument('--dry-run', action='store_true', help='do not execute build')
@cli.argument(
    '--release-root', type=Path,
    required=not OPS_ROOT,
    default=OPS_ROOT / 'releases' if OPS_ROOT else None,
    help='''provide path to the release directory (default derived from
            OPS_ROOT environment variable, which is %(default)s)
         ''',
)
@cli.sub_command_info('action', 'release management action')
@cli.sub_command(build)
@cli.sub_command(build_instructions)
@cli.sub_command(bind)
def main(args: ARGS):
    """Release management tool."""
    return args.action()


if __name__ == '__main__':
    main()
