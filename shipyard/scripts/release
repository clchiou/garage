#!/usr/bin/env python3

from collections import OrderedDict
from pathlib import Path
import logging
import os
import sys

ROOT = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(ROOT / 'py' / 'foreman'))
sys.path.append(str(ROOT / 'py' / 'garage'))
sys.path.append(str(ROOT / 'py' / 'startup'))
sys.path.append(str(ROOT / 'shipyard'))

from foreman import Label

from garage import cli
from garage import scripts
from garage.components import ARGS

import shipyard
import shipyard.release


LOG = logging.getLogger(__name__)


# We search ${OPS_ROOT}/releases for releases by default
OPS_ROOT = scripts.ensure_path(os.environ.get('OPS_ROOT'))


@cli.command('build', help='build pods')
@shipyard.argument_foreman
@shipyard.argument_builder
@cli.argument(
    'pod', nargs='+',
    help='''provide versioned label of pods to build
            (format: "//label@version")
         ''',
)
def build(args: ARGS):
    """Build pods from versioned labels."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    labels_versions = OrderedDict()  # As ordered set
    for label_version in args.pod:
        label, version = label_version.rsplit('@', maxsplit=1)
        labels_versions[(Label.parse(label), version)] = None

    instructions = repo.load_instructions(labels_versions)

    okay = shipyard.release.execute_instructions(instructions, repo, builder)
    return 0 if okay else 1


@cli.command('build-inst', help='build pods from instruction files')
@shipyard.argument_foreman
@shipyard.argument_builder
@cli.argument(
    'instruction', type=Path, nargs='+',
    help='provide path to release instruction file',
)
def build_instructions(args: ARGS):
    """Execute release instruction files and build pods."""

    rules = shipyard.RuleIndex(args)
    builder = shipyard.Builder(args)
    repo = shipyard.release.ReleaseRepo(args.release_root, rules)

    instructions = repo.load_instruction_files(args.instruction)

    okay = shipyard.release.execute_instructions(instructions, repo, builder)
    return 0 if okay else 1


@cli.command('release')
@cli.argument('--dry-run', action='store_true', help='do not execute build')
@cli.argument(
    '--release-root', type=Path,
    required=not OPS_ROOT,
    default=OPS_ROOT / 'releases' if OPS_ROOT else None,
    help='''provide path to the release directory (default derived from
            OPS_ROOT environment variable, which is %(default)s)
         ''',
)
@cli.sub_command_info('action', 'release management action')
@cli.sub_command(build)
@cli.sub_command(build_instructions)
def main(args: ARGS):
    """Release management tool."""
    return args.action()


if __name__ == '__main__':
    main()
