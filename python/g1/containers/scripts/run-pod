#!/usr/bin/env python3
"""Prepare a dummy pod and then run it."""

import json
import logging
import tempfile

from startup import startup

import g1.scripts.parts
from g1 import scripts
from g1.apps import bases
from g1.bases import argparses
from g1.bases.assertions import ASSERT
from g1.containers import models as ctr_models
from g1.containers import scripts as ctr_scripts

LOG = logging.getLogger()  # Use the root logger.


@startup
def add_arguments(parser: bases.LABELS.parser) -> bases.LABELS.parse:
    parser.add_argument(
        '--pod-id',
        help='provide pod id',
    )
    parser.add_argument(
        '--keep',
        action=argparses.StoreBoolAction,
        default=False,
        help='keep pod after exit (default: %(default_string)s)',
    )
    parser.add_argument(
        '--image-id',
        action=argparses.AppendConstAndValueAction,
        dest='image',
        const='id',
        help='add image by id',
    )
    parser.add_argument(
        '--image-nv',
        action=argparses.AppendConstAndValueAction,
        dest='image',
        const='nv',
        metavar=('NAME', 'VERSION'),
        nargs=2,
        help='add image by name and version',
    )
    parser.add_argument(
        '--image-tag',
        action=argparses.AppendConstAndValueAction,
        dest='image',
        const='tag',
        help='add image by tag',
    )
    parser.add_argument(
        '--mount',
        action='append',
        help='add mount of the form "source:target[:ro]"',
    )
    parser.add_argument(
        '--overlay',
        action='append',
        help='add overlay of the form "source...:target[:ro]"',
    )


# NOTE: Use sudo rather than requiring root privilege to run this script
# because this is a development script, and we do not expect the user to
# install its dependent libraries to the system; in other words, do NOT
# `sudo run-pod` because the python3 that sudo finds will not be able to
# find the dependent libraries.
@scripts.using_sudo()
def main(
    args: bases.LABELS.args,
    _: g1.scripts.parts.LABELS.setup,
):
    pod_id = init(args)
    ctr_scripts.ctr_run_prepared_pod(pod_id)
    # Only remove on normal exit; on error, keep pod for diagnosis.
    if not args.keep:
        ctr_scripts.ctr_remove_pod(pod_id)
    return 0


def init(args):
    pod_id = args.pod_id or ctr_models.generate_pod_id()
    LOG.info('use pod id: %s', pod_id)
    images = parse_image_args(ASSERT.not_empty(args.image or ()))
    mounts = parse_mount_args(args.mount or ())
    overlays = parse_overlay_args(args.overlay or ())
    with tempfile.NamedTemporaryFile(suffix='.json') as config_tempfile:
        write_config(images, mounts, overlays, config_tempfile.name)
        ctr_scripts.ctr_prepare_pod(pod_id, config_tempfile.name)
    return pod_id


def parse_image_args(image_args):
    images = []
    for arg in image_args:
        if arg[0] == 'id':
            images.append({'id': arg[1]})
        elif arg[0] == 'nv':
            images.append({'name': arg[1][0], 'version': arg[1][1]})
        elif arg[0] == 'tag':
            images.append({'tag': arg[1]})
        else:
            ASSERT.unreachable('unknown image arg: {}', arg)
    return images


def parse_mount_args(mount_args):
    mounts = []
    for arg in mount_args:
        parts = arg.split(':')
        if ASSERT.in_(len(parts), (2, 3)) == 3:
            source, target, read_only = parts
            read_only = read_only == 'ro'
        else:
            source, target = parts
            read_only = False
        mounts.append({
            'source': source,
            'target': target,
            'read_only': read_only,
        })
    return mounts


def parse_overlay_args(overlay_args):
    overlays = []
    for arg in overlay_args:
        parts = arg.split(':')
        ASSERT.greater_or_equal(len(parts), 2)
        if parts[-1] == 'ro':
            sources = parts[:-2]
            target = parts[-2]
            read_only = True
        else:
            sources = parts[:-1]
            target = parts[-1]
            read_only = False
        overlays.append({
            'sources': sources,
            'target': target,
            'read_only': read_only,
        })
    return overlays


def write_config(images, mounts, overlays, config_path):
    LOG.info('write config to: %s', config_path)
    config = {
        'name': 'dummy',
        'version': '0.0.1',
        'apps': [],
        'images': images,
        'mounts': mounts,
        'overlays': overlays,
    }
    with open(config_path, 'w') as config_file:
        json.dump(config, config_file)


if __name__ == '__main__':
    bases.run(main)
