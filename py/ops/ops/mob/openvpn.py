__all__ = [
    'openvpn',
]

from pathlib import Path
import logging

from garage import apps
from garage import scripts


LOG = logging.getLogger(__name__)


@apps.with_prog('copy-client')
@apps.with_help('copy generated client data')
@apps.with_argument('cadir', type=Path, help='provide easy-rsa cadir')
@apps.with_argument('client', help='provide client name')
@apps.with_argument('target', type=Path, help='set target directory')
def copy_client(args):
    """Copy generated client data to another directory."""
    srcs = [
        args.cadir / 'keys' / file
        for file in (args.client + '.crt', args.client + '.key')
    ]
    return 0 if safe_copy(srcs, args.target) else 1


@apps.with_prog('copy-server')
@apps.with_help('copy generated server data')
@apps.with_argument('cadir', type=Path, help='provide easy-rsa cadir')
@apps.with_argument('target', type=Path, help='set target directory')
def copy_server(args):
    """Copy generated server data to another directory."""
    srcs = [
        args.cadir / 'keys' / file
        for file in 'ca.crt ca.key server.crt server.key dh2048.pem'.split()
    ]
    return 0 if safe_copy(srcs, args.target) else 1


def safe_copy(srcs, dst_dir):
    okay = True
    for src in srcs:
        if not src.exists():
            LOG.error('source file does not exist: %s', src)
            okay = False
        dst = dst_dir / src.name
        if dst.exists():
            LOG.error('attempt to overwrite: %s', dst)
            okay = False
    if not okay:
        return False
    scripts.mkdir(dst_dir)
    for src in srcs:
        scripts.cp(src, dst_dir)
    return True


@apps.with_prog('make-ovpn')
@apps.with_help('make .ovpn file')
@apps.with_argument(
    'server_dir', type=Path, help='provide directory of server credentials')
@apps.with_argument(
    'client_dir', type=Path, help='provide directory of client credentials')
@apps.with_argument('config', help='provide config file name')
@apps.with_argument('client', help='provide client name')
@apps.with_argument('output', type=Path, help='set output .ovpn file')
def make_ovpn(args):
    """Make .ovpn file."""
    parts = [
        args.client_dir / args.config,
        args.server_dir / 'ca.crt',
        args.client_dir / (args.client + '.crt'),
        args.client_dir / (args.client + '.key'),
        # By the way, ta.key (not ca.key) is the TLS-auth key, which is
        # generated by server, not by easy-rsa
        args.server_dir / 'ta.key',
    ]
    okay = True
    for part in parts:
        if not part.exists():
            LOG.error('file does not exist: %s', part)
            okay = False
    if not okay:
        return 1
    if args.output.exists():
        LOG.warning('overwrite %s', args.output)
    scripts.ensure_contents(
        args.output,
        ''.join([
            parts[0].read_text(),
            '<ca>\n', parts[1].read_text(), '</ca>\n',
            '<cert>\n', parts[2].read_text(), '</cert>\n',
            '<key>\n', parts[3].read_text(), '</key>\n',
            '<tls-auth>\n', parts[4].read_text(), '</tls-auth>\n',
        ]),
    )
    return 0


@apps.with_help('manage openvpn')
@apps.with_apps(
    'operation', 'operation on openvpn',
    copy_client,
    copy_server,
    make_ovpn,
)
def openvpn(args):
    """Manage OpenVPN.

       We assume that you are using easy-rsa because that seems to be
       what OpenVPN recommends.
    """
    return args.operation(args)
