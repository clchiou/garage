ops - Operations Tool

ops is a collection of scripts executed on local and remote machines.
You add functionalities to ops when all of the following conditions are
true:

  * Such functionality cannot be executed from inside a container.

  * Implementing such functionality in configuration management system
    is clumsy.

In addition, you should:

  * Make ops depend only on Python 3 standard library so that deploying
    ops to remote machines will be easy (you may simply create an zip
    archive and copy that archive to the remote machines).


=== Pod (Container Group)

Containers are deployed in a tightly-coupled group called "pod".  A pod
is described by ops tool -specific metadata and an "abstract" Appc pod
manifest, which ops will insert "realized" deployment-time data into.
The deployment-time includes, for example, filesystem path of volumes
and allocated port numbers.

Here is an example of the pod description:

    {
        # Required.
        "name": "example-pod",

        # Required, integer or string.
        "version": 1001,

        # Optional: Series of systemd units.
        "systemd-units": [
            {
                # Required: Location of the unit file, either a path or
                # an URI.
                "unit-file": "path/to/unit-file",

                # Optional: Instances of a templated unit, which could
                # be either as an array or as the number of instances.
                "instances": [8080, 8081, 8082],
            },
            ...
        ],

        # Optional: Series of image locations.
        "images": [
            {
                # Required: Image ID.
                # https://github.com/appc/spec/blob/master/spec/types.md#image-id-type
                "id": "sha512-XXX",

                # Either "uri" or "path" must be set ("uri" could be
                # without scheme).
                "path": "path/to/image.aci",

                # Optional: Location of signature, either path or URI.
                "signature": "path/to/image.aci.asc",
            },
            ...
        ],

        # Optional: Series of stateful volumes.
        #
        # Each volume entry here must have a corresponding host-kind
        # volume entry in the pod manifest of which "source" attribute
        # must not be set and will be inserted by ops tool.
        #
        # They are _NOT_ shared across versions of pod, though; if you
        # want to share stateful data across versions of pod, you
        # probably should use things like RDBMS.
        "volumes": [
            {
                # Required.
                "name": "volume-name",

                # Optional: Default to "nobody" and "nogroup".
                "user": "root",
                "group": "root",

                # Optional: Initial contents of the volume, which could
                # be either path or URI.
                "data": "path/to/data.tar.gz",
            },
            ...
        ],

        # Required: The "abstract" Appc pod manifest.
        "manifest": {
            "acVersion": "0.8.10",
            "acKind": "PodManifest",
            ...
        }
    }


To deploy, you create a deployment bundle, copy that bundle to the
target machine, and then run the ops tool on the bundle.  You may remove
the bundle after deployment.  A bundle includes:

  * A JSON file "pod.json" describes the pod.

  * All required build artifacts: images, unit files, etc.  (Note that
    we said that the "path" of an image is relative to pod.json.)

The build artifacts are stored under /etc (for configuration files) and
container runtime (for images).  The pod.json is also stored under /etc,
which means you may redeploy prior versions of the same group that you
have deployed to this machine, given that you have not cleaned them up.
