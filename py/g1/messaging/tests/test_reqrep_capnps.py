import unittest

import dataclasses
import typing
from pathlib import Path

import capnp

from g1.messaging import reqrep
from g1.messaging.wiredata import capnps

try:
    from g1.devtools import tests
except ImportError:
    tests = None

# Test whether ``testdata/test-2.capnp`` and request and response object
# generated by ``reqrep`` match.


class SomeError(Exception):

    def __eq__(self, other):
        return type(self) is type(other) and self.args == other.args


class SomeOtherError(Exception):

    def __eq__(self, other):
        return type(self) is type(other) and self.args == other.args


@dataclasses.dataclass
class Foo:

    __module__ = 'g1.messaging.tests.test_2'

    bool_field: bool


class NullInterface:

    __module__ = 'g1.messaging.tests.test_2'


class Interface1:

    __module__ = 'g1.messaging.tests.test_2'

    @reqrep.raising(SomeError)
    def func1(self, x: int, y: typing.List[str]) -> Foo:
        raise NotImplementedError


@reqrep.raising(SomeError)
class Interface2:

    __module__ = 'g1.messaging.tests.test_2'

    def func2(self) -> int:
        raise NotImplementedError

    @reqrep.raising(SomeOtherError)
    def func3(self, x: bytes):
        raise NotImplementedError


@unittest.skipUnless(tests, 'g1.tests unavailable')
@unittest.skipUnless(
    tests and tests.check_program(['capnp', '--version']),
    'capnp unavailable',
)
class CapnpReqrepTest(unittest.TestCase):

    TESTDATA_PATH = Path(__file__).parent / 'testdata'

    @classmethod
    def compile(cls, path):
        path = str(cls.TESTDATA_PATH / path)
        return tests.check_output(['capnp', 'compile', '-o-', path])

    @classmethod
    def setUpClass(cls):
        cls.loader = capnp.SchemaLoader()
        cls.loader.load_once(cls.compile('test-2.capnp'))
        cls.wire_data = capnps.CapnpWireData(cls.loader)

    def assert_obj(self, expect):
        data = self.wire_data.to_lower(expect)
        actual = self.wire_data.to_upper(type(expect), data)
        self.assertEqual(actual, expect)

    def test_null_interface(self):
        request_type, response_type = \
            reqrep.generate_interface_types(NullInterface, name='Null')
        self.assert_obj(request_type(args=None))
        self.assert_obj(response_type())

    def test_interface_1(self):
        request_type, response_type = \
            reqrep.generate_interface_types(Interface1)
        self.assert_obj(
            request_type(args=request_type.m.func1(x=0, y=['a', 'b']))
        )
        self.assert_obj(request_type(args=request_type.m.func1(x=1, y=None)))
        self.assert_obj(response_type())
        self.assert_obj(
            response_type(
                result=response_type.Result(func1=Foo(bool_field=True))
            )
        )
        self.assert_obj(
            response_type(
                error=response_type.Error(some_error=SomeError('some error'))
            )
        )

    def test_interface_2(self):
        request_type, response_type = \
            reqrep.generate_interface_types(Interface2)
        self.assert_obj(request_type(args=request_type.m.func2()))
        self.assert_obj(
            request_type(args=request_type.m.func3(x=b'\x01\x02\x03'))
        )
        self.assert_obj(response_type())
        self.assert_obj(response_type(result=response_type.Result(func2=0)))
        self.assert_obj(
            response_type(error=response_type.Error(some_error=SomeError('')))
        )
        self.assert_obj(
            response_type(
                error=response_type.
                Error(some_other_error=SomeOtherError(0, ''))
            )
        )


if __name__ == '__main__':
    unittest.main()
