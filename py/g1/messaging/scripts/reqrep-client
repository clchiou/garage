#!/usr/bin/env python3

import argparse
import base64
import dataclasses
import json
import pprint
import re

try:
    import capnp
except ImportError:
    capnp = None

from startup import startup

from g1.apps import asyncs
from g1.asyncs import kernels
from g1.bases import labels
from g1.bases.assertions import ASSERT
from g1.messaging.reqrep import clients
from g1.messaging.reqrep import utils
from g1.messaging.wiredata import jsons

try:
    from g1.messaging.wiredata import capnps
except ImportError:
    capnps = None


@startup
def add_arguments(parser: asyncs.LABELS.parser) -> asyncs.LABELS.parse:
    if capnp and capnps:
        parser.add_argument(
            '--format',
            default='json',
            choices=('json', 'binary', 'packed'),
            help='select packet format (default: %(default)s)',
        )
        parser.add_argument(
            '--schema',
            action='append',
            help='add schema file path',
        )
    parser.add_argument('request_type', help='set label to request type')
    parser.add_argument('response_type', help='set label to response type')
    parser.add_argument('url', help='set server URL')
    parser.add_argument('method', help='set method to call')
    parser.add_argument(
        'args',
        metavar='ARG=VALUE',
        nargs=argparse.REMAINDER,
        help='set method argument',
    )


def main(args: asyncs.LABELS.args):
    """Generic reqrep client."""

    json_wire_data = jsons.JsonWireData()

    if capnp and capnps and args.format != 'json':
        loader = capnp.SchemaLoader()
        for schema_path in args.schema or ():
            with open(schema_path, 'rb') as schema_file:
                loader.load_once(schema_file.read())
        if args.format == 'binary':
            wire_data = capnps.CapnpWireData(loader)
        else:
            ASSERT.equal(args.format, 'packed')
            wire_data = capnps.CapnpPackedWireData(loader)
    else:
        wire_data = json_wire_data

    request_type = labels.load_global(args.request_type)
    response_type = labels.load_global(args.response_type)

    method_args = json_wire_data.to_upper(
        request_type.types[args.method],
        json.dumps(parse_args_list(args.args)).encode('ascii'),
    )
    method_args_str = '%s(%s)' % (
        args.method,
        ', '.join(
            '%s=%r' % (field.name, getattr(method_args, field.name))
            for field in dataclasses.fields(method_args)
        ),
    )

    with clients.Client(request_type, response_type, wire_data) as client:
        client.socket.dial(args.url)
        response = kernels.run(
            client.transceive(
                request_type(
                    args=request_type.Args(**{args.method: method_args})
                )
            )
        )
        if response.error is None:
            output = pprint.pformat(utils.select(response.result)[1])
            rc = 0
        else:
            output = pprint.pformat(utils.select(response.error)[1])
            rc = 1
        if len(output) <= 40:
            fmt = '%s -> %s'
        else:
            fmt = '%s ->\n%s'
        print(fmt % (method_args_str, output))

    return rc


IDENTIFIER_PATTERN = re.compile(r'[a-zA-Z_]\w*')

# For now we do not support escaping quotation "\"" inside the string.
BINARY_STRING = re.compile(r'b"[^"]*"')


def parse_args_list(args_list):
    kwargs = {}
    for arg_str in args_list:
        name, value = arg_str.split('=', maxsplit=1)
        # Make a special case for identifier-kind of strings.
        if IDENTIFIER_PATTERN.fullmatch(value):
            pass
        elif BINARY_STRING.fullmatch(value):
            # Assume it can be encoded in UTF-8 for now.
            value = (
                base64.standard_b64encode(value[2:-1].encode('utf-8'))\
                .decode('ascii')
            )
        elif value == 'true':
            value = True
        elif value == 'false':
            value = False
        else:
            value = json.loads(value)
        kwargs[name] = value
    return kwargs


if __name__ == '__main__':
    asyncs.run(main)
